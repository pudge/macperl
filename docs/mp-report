#!/usr/bin/perl -w

use lib "../perl/lib";
use strict;
use Digest::MD5 'md5_hex';
use Pudge::Web;

{
	my($pw) = Pudge::Web->new(
		Id		=> '$Id$',
		virtual_user	=> "macperl",
		cookie_name	=> "report_user",
		cookie_path	=> "/",
		cookie_domain	=> "macperl.sourceforge.net",
		tt_path		=> [
					"../htdocs/templates/mp-report",
					"../htdocs/templates"
		],
	);

	main($pw);
}

sub main {
	my($pw) = @_;
	$pw->initdata();

	# possible value of "op" parameter in form
	$pw->{ops} = {
		add_user	=> [ 1,			\&add_user	],
		create_user	=> [ 1,			\&create_user	],

		add_config	=> [ $pw->{user}{id},	\&add_config	],
		create_config	=> [ $pw->{user}{id},	\&create_config	],
		view_config	=> [ 1,			\&view_config	],

		explain_test	=> [ 1,			\&explain_test	],
		add_test	=> [ $pw->{user}{id},	\&add_test	],
		create_test	=> [ $pw->{user}{id},	\&create_test	],
		view_test	=> [ 1,			\&view_test	],
		view_tests	=> [ 1,			\&view_tests	],

		default		=> [ 1,			\&default	]
	};

	$pw->main();
}

# view data
sub view_config {
	my($pw) = @_;
	my $config = get_config($pw, $pw->{form}{config_id});
	my $user = get_user($pw, $config->{user_id});

	$pw->header("View Configuration #$config->{id}");
	$pw->process('view_config', {
		config		=> $config,
		myuser		=> $user,
		map { ($_ => get_param($pw, $_)) }
			qw ( processor version gusiversion osversion )
	});
}

sub view_test {
	my($pw) = @_;
	my $test = get_test($pw, $pw->{form}{test_id});
	my $config = get_config($pw, $test->{config_id});
	my $user = get_user($pw, $test->{user_id});

	$pw->header("View Test Result #$test->{id}");
	$pw->process('view_test', {
		test		=> $test,
		config		=> $config,
		myuser		=> $user,
		tests		=> get_testdesc($pw),
		map { ($_ => get_param($pw, $_)) }
			qw ( compiler status )
	});
}

sub view_tests {
	my($pw) = @_;
	my $tests = get_tests($pw);
	my $user_tests = get_usertests($pw);

	$pw->header('View Tests');
	$pw->process('view_tests', {
		tests		=> $tests,
		user_tests	=> $user_tests,
		configs		=> get_configsdesc($pw),
		users		=> get_users($pw),
		map { ($_ => get_param($pw, $_)) }
			qw( compiler status version )
	});
}

# create records
sub create_user {
	my($pw) = @_;
	my($id, $name, $email, $pass, $sf_match, $sth);

	if (!$pw->{form}{pass1} || !$pw->{form}{pass2}) {
		$pw->error('No password given.  Please try again.');
		return;
	} elsif ($pw->{form}{pass1} ne $pw->{form}{pass2}) {
		$pw->error("Passwords do not match.  Please try again.");
		return;
	} else {
		$pass = md5_hex($pw->{form}{pass1});
	}

	($name = lc $pw->{form}{user}) =~ s/[^a-zA-Z0-9_]+//g;
	if (!$name) {
		$pw->error('No user name given.  Please try again.');
		return;
	} elsif (user_exists($pw, $name)) {
		$pw->error("Sorry, that user name is already in use.  Please select another.");
		return;
	}

	$email = $pw->{form}{email};
	$sf_match = $pw->{form}{sf_match} ? 1 : 0;

	$sth = $pw->get_sth(<<'EOT', $name, $email, $pass, $sf_match);
INSERT INTO	users	(user, email, pass, sf_match)
VALUES			(?, ?, ?, ?)
EOT
	$id = $sth->{'mysql_insertid'};
	$pw->{user} = {
		id		=> $id,
		user		=> $name,
		email		=> $email,
		pass		=> $pass,
		sf_match	=> $sf_match,
	} if $id;

	$pw->header('Create User');
	$pw->process('create_user');
}

sub create_config {
	my($pw) = @_;
	my(%config, $id, $sth);

	if (!$pw->{form}{name}) {
		$pw->error("Configuration must have a name.  Please go back and try again.");
		return;
	}

	for (qw(cvs build mwc mpw)) {
		$config{$_} = $pw->{form}{$_} ? 1 : 0;
	}

	for (qw(processor version gusiversion osversion name notes results)) {
		$config{$_} = $pw->{form}{$_};
	}

	($config{ram} = $pw->{form}{ram}) =~ s/\D//g;

	$sth = $pw->get_sth(<<'EOT', $pw->{user}{id}, @config{qw(processor ram version gusiversion osversion cvs build mwc mpw name notes results)});
INSERT INTO	configs	(user_id, processor, ram, version, gusiversion, osversion, cvs, build, mwc, mpw, name, notes, results)
VALUES			(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
EOT
	$config{id} = $sth->{'mysql_insertid'};

	$pw->header('Create Configuration');
	$pw->process('create_config', { config => \%config });
}

sub create_test {
	my($pw) = @_;
	my(%test, $id, $sth);

	$test{is_tool} = $pw->{form}{is_tool} ? 1 : 0;

	for (qw(test_id config_id status compiler notes results)) {
		$test{$_} = $pw->{form}{$_};
	}

	$sth = $pw->get_sth(<<'EOT', $pw->{user}{id}, @test{qw(test_id config_id status compiler is_tool notes results)});
INSERT INTO	user_tests	(user_id, test_id, config_id, status, compiler, is_tool, notes, results)
VALUES			(?, ?, ?, ?, ?, ?, ?, ?)
EOT
	$test{id} = $sth->{'mysql_insertid'};
	my $test_id = get_testdesc($pw);
	$test{test} = $test_id->{$test{test_id}};

	$pw->header('Create Test');
	$pw->process('create_test', { test => \%test });
}

# add screens
sub add_user {
	my($pw) = @_;
	$pw->header('Add User');
	$pw->process('add_user');
}

sub add_config {
	my($pw) = @_;
	$pw->header('Add Configuration');
	$pw->process('add_config', { map { ($_ => get_param($pw, $_)) }
		qw( processor version gusiversion osversion )
	});
}

sub add_test {
	my($pw) = @_;
	my $config_id = get_configdesc($pw);
	my $test_id   = get_tests($pw);
	if (! keys %$config_id) {
		$pw->error("Please add a configuration before entering test results.");
		return;
	}

	$pw->header('Add Test');
	$pw->process('add_test', {
		config_id	=> $config_id,
		test_id		=> $test_id,
		map { ($_ => get_param($pw, $_)) } qw( status compiler )
	});
}

sub explain_test {
	my($pw) = @_;
	$pw->header('Explain Tests');
	$pw->process('statusexplain');
}

# default
sub default {
	my($pw) = @_;
	$pw->header();
	$pw->process('notes');
}

# helper functions

sub login {
	my($pw) = @_;
	my @data;
	$pw->{user} = {};

	if ($pw->{form}{op} && $pw->{form}{op} eq 'logout') {
		return;

	} elsif ($pw->{form}{user} && $pw->{form}{pass}) {
		@data = $pw->get_dbarray(
			['id,user,email,pass,sf_match', 'users', 'user=? AND pass=?'],
			$pw->{form}{user}, md5_hex($pw->{form}{pass})
		);
		
	} else {
		my($id, $pass) = $pw->get_cookie();
		return unless $id && $pass;
		@data = $pw->get_dbarray(
			['id,user,email,pass,sf_match', 'users', 'id=? AND pass=?'],
			$id, $pass
		);
	}

	@{$pw->{user}}{qw(id user email pass sf_match)} = @data;
}

sub user_exists {
	my($pw, $user) = @_;
	return $pw->get_dbarray(['user', 'users', 'user=?'], $user);
}

sub get_param {
	my($pw, $param) = @_;
	my $data = $pw->get_dbhashdesc(['id,name', 'code_param', 'type=?'], $param);
	$data->{9999} = "Unknown";
	return $data;
}

sub get_users {
	my($pw) = @_;
	return $pw->get_dbhash(['id,user,sf_match', 'users'], 'id');
}

sub get_user {
	my($pw, $id) = @_;
	my $data = $pw->get_dbhash(['id,user,sf_match', 'users', 'id=?'], 'id', $id);
	return $data->{$id};
}

sub get_testdesc {
	my($pw) = @_;
	return $pw->get_dbhashdesc(['id,test', 'tests']);
}

sub get_test {
	my($pw, $id) = @_;
	my $data = $pw->get_dbhash(['*', 'user_tests', 'id=?'], 'id', $id);
	return $data->{$id};
}

sub get_configdesc {
	my($pw) = @_;
	return $pw->get_dbhashdesc(['id,name', 'configs', 'user_id=?'], $pw->{user}{id});
}

sub get_configsdesc {
	my($pw) = @_;
	return $pw->get_dbhash(['id,name,version', 'configs'], 'id');
}

sub get_config {
	my($pw, $id) = @_;
	my $data = $pw->get_dbhash(['*', 'configs', 'id=?'], 'id', $id);
	return $data->{$id};
}

sub get_usertests {
	my($pw) = @_;
	my $sql = $pw->compose_select([
		'id,user_id,test_id,config_id,status,compiler,is_tool,date',
		'user_tests', '', 'ORDER BY id'
	]);

	my $sth = $pw->get_sth($sql);

	my $data = {};
	while (my $row = $sth->fetchrow_hashref) {
		push @{$data->{$row->{test_id}}}, $row;
	}
	return $data;
}

sub get_tests {
	my($pw) = @_;
	my $sth = $pw->get_sth(<<'EOT');
SELECT		id, test, status
FROM		tests
ORDER BY	test
EOT

	my $user_tests = get_usertests($pw);

	my $configs    = get_configsdesc($pw);
	my $version    = get_param($pw, 'version');
	my @versions   = sort { $b <=> $a } %$version;

	$pw->{form}{version} = defined($pw->{form}{version})
	    ? $pw->{form}{version} : $versions[1];

	my $data = [];
	while (my $row = $sth->fetchrow_hashref) {
	    if (!$row->{status}) {
			my %rank;
			for my $tr (@{$user_tests->{$row->{id}}}) {
			    next if $pw->{form}{version} && $configs->{$tr->{config_id}}{version} != $pw->{form}{version};
				$rank{$tr->{status}}++;
			}
			($row->{status}) = sort {
				$rank{$b} <=> $rank{$a}
					||
				    $b <=> $a
			} keys %rank;
		}
		push @$data, $row;
	}

	return $data;
}

1;

__END__
